
@misc{noauthor_codevia-iocodeviacenturionnetapi_nodate,
	title = {codevia-io/{Codevia}.{Centurion}.{Net}.{API}},
	url = {https://github.com/codevia-io/Codevia.Centurion.Net.API},
	urldate = {2023-09-08},
	keywords = {code},
	file = {codevia-io/Codevia.Centurion.Net.API:/home/nicos/Zotero/storage/WU42SIJQ/Codevia.Centurion.Net.html:text/html},
}

@misc{noauthor_dvic_nodate,
	title = {{DVIC} - {De} {Vinci} {Innovation} {Center}},
	url = {https://dvic.devinci.fr/tutorial/lighthouse-positioning},
	urldate = {2023-09-07},
	keywords = {site},
	file = {DVIC - De Vinci Innovation Center:/home/nicos/Zotero/storage/3D6GPNDI/lighthouse-positioning.html:text/html},
}

@misc{karaman_sampling-based_2011,
	title = {Sampling-based {Algorithms} for {Optimal} {Motion} {Planning}},
	url = {http://arxiv.org/abs/1105.1186},
	abstract = {During the last decade, sampling-based path planning algorithms, such as Probabilistic RoadMaps (PRM) and Rapidly-exploring Random Trees (RRT), have been shown to work well in practice and possess theoretical guarantees such as probabilistic completeness. However, little effort has been devoted to the formal analysis of the quality of the solution returned by such algorithms, e.g., as a function of the number of samples. The purpose of this paper is to fill this gap, by rigorously analyzing the asymptotic behavior of the cost of the solution returned by stochastic sampling-based algorithms as the number of samples increases. A number of negative results are provided, characterizing existing algorithms, e.g., showing that, under mild technical conditions, the cost of the solution returned by broadly used sampling-based algorithms converges almost surely to a non-optimal value. The main contribution of the paper is the introduction of new algorithms, namely, PRM* and RRT*, which are provably asymptotically optimal, i.e., such that the cost of the returned solution converges almost surely to the optimum. Moreover, it is shown that the computational complexity of the new algorithms is within a constant factor of that of their probabilistically complete (but not asymptotically optimal) counterparts. The analysis in this paper hinges on novel connections between stochastic sampling-based path planning algorithms and the theory of random geometric graphs.},
	urldate = {2023-09-07},
	publisher = {arXiv},
	author = {Karaman, Sertac and Frazzoli, Emilio},
	month = may,
	year = {2011},
	note = {arXiv:1105.1186 [cs]},
	keywords = {Computer Science - Robotics, pdf},
	annote = {1
},
	annote = {Comment: 76 pages, 26 figures, to appear in International Journal of Robotics Research},
	file = {arXiv.org Snapshot:/home/nicos/Zotero/storage/VSTD5TYJ/1105.html:text/html;Full Text PDF:/home/nicos/Zotero/storage/MV2ZTPTU/Karaman and Frazzoli - 2011 - Sampling-based Algorithms for Optimal Motion Plann.pdf:application/pdf},
}

@book{adiyatov_rapidly-exploring_2013,
	title = {Rapidly-exploring random tree based memory efficient motion planning},
	isbn = {978-1-4673-5557-5},
	abstract = {This paper presents a modified version of the RRT* motion planning algorithm, which limits the memory required for storing the tree. We run the RRT* algorithm until the tree has grown to a predefined number of nodes and afterwards we remove a weak node whenever a high performance node is added. A simple two-dimensional navigation problem is used to show the operation of the algorithm. The algorithm was also applied to a high-dimensional redundant robot manipulation problem to show the efficacy. The results show that our algorithm outperforms RRT and comes close to RRT* with respect to the optimality of returned path, while needing much less number of nodes stored in the tree.},
	author = {Adiyatov, Olzhas and Varol, Atakan},
	month = aug,
	year = {2013},
	doi = {10.1109/ICMA.2013.6617944},
	note = {Pages: 359},
	keywords = {pdf},
	annote = {2
},
	file = {Full Text PDF:/home/nicos/Zotero/storage/KBPNWXQI/Adiyatov and Varol - 2013 - Rapidly-exploring random tree based memory efficie.pdf:application/pdf},
}

@misc{matlab_plan_2022,
	title = {Plan {3D} {Paths} for {Drones} {\textbar} {Motion} {Planning} with the {RRT} {Algorithm}, {Part} 4},
	url = {https://www.youtube.com/watch?v=aMhFCBlK-NM},
	abstract = {Are you working with autonomous drone applications such as package delivery or advanced air mobility? Learn how to plan and execute unmanned aerial vehicle (UAV) flights using a guidance model for a fixed-wing aircraft. A fixed-wing UAV is nonholonomic in nature and must obey aerodynamic constraints like maximum roll angle, flight path angle, and airspeed when moving between waypoints.

Watch a demonstration of motion planning of a fixed-wing UAV using the rapidly exploring random tree (RRT) algorithm that is given a start and goal pose on a 3D map. You will learn how to use UAV Toolbox with MATLAB® to generate 3D Dubins motion primitives. You will also learn how to use a customizable path-planning template with Navigation Toolbox™ to define a custom state space and state validator for sampling-based path planning.

Steps include:
- Setting up a 3D map
- Providing the start pose and goal pose
- Planning a path with RRT using 3D Dubins motion primitives
- Smoothing the planned path
- Simulating the UAV flight following the planned path

Watch the full video series:    • Motion Planning Using RRT Algorithm  

Learn More:
- Read ebook: Motion Planning with MATLAB: https://bit.ly/3O04mDe
- See example: Motion Planning with RRT for Fixed-Wing UAV: https://bit.ly/3yyvfbV
- See example: Generate Random 3-D Occupancy Map for UAV Motion Planning: https://bit.ly/3c0Vu2V
- Read documentation: uavDubinsConnection: https://bit.ly/3uK5ggn

Chapters: 
0:37 - Motion Planning Workflow With RRT Algorithm
1:12 - UAV Toolbox Overview
2:05 - Motion Planning with RRT for Fixed-Wing UAV Example
2:52 - Load Map
4:15 - RRT Algorithm Overview
4:52 - 3-D Dubins Motion Primitives
5:39 - Defining the State Space
6:53 - Customizable Path Planning Interface for Sampling-Based Algorithms
8:21 - Defining the State Validator
9:12 - Setup and Execute the RRT Planner
10:38 - Simulate and Visualize the UAV
--------------------------------------------------------------------------------------------------------
Get a free product trial: https://goo.gl/ZHFb5u
Learn more about MATLAB: https://goo.gl/8QV7ZZ
Learn more about Simulink: https://goo.gl/nqnbLe
See what's new in MATLAB and Simulink: https://goo.gl/pgGtod

© 2022 The MathWorks, Inc. MATLAB and Simulink are registered trademarks of The MathWorks, Inc. 
See www.mathworks.com/trademarks for a list of additional trademarks. Other product or brand names may be trademarks or registered trademarks of their respective holders.},
	urldate = {2023-09-07},
	author = {{MATLAB}},
	month = aug,
	year = {2022},
	keywords = {video},
}

@misc{matlab_path_2020,
	title = {Path {Planning} with {A}* and {RRT} {\textbar} {Autonomous} {Navigation}, {Part} 4},
	url = {https://www.youtube.com/watch?v=QR3U1dgc5RE},
	abstract = {See the other videos in this series:    • Autonomous Navigation  

This video explores some of the ways that we can use a map like a binary occupancy grid for motion and path planning. We briefly cover what motion planning means and how we can use a graph to solve this planning problem. We then walk through two popular approaches for creating that graph: search-based algorithms like A* and sampling-based algorithms like RRT and RRT*.

Additional Resources: 
- Planning Mobile-Robot Paths Using RRT MATLAB: https://bit.ly/38PsPZb
- Create an RRT planner: https://bit.ly/2Zoyjac
- Download ebook: Sensor Fusion and Tracking for Autonomous Systems: An Overview: https://bit.ly/32iVFzX
- Download white paper: Sensor Fusion and Tracking for Autonomous Systems: https://bit.ly/2DwbHvK
- Sampling-Based Algorithms for Optimal Motion Planning, Karaman and Frazzoli: https://arxiv.org/pdf/1105.1186.pdf
-  A* Path Finding by Sebastian Lague video:    • A* Pathfinding (E01: algorithm explan...  
- RRT, RRT* \& Random Trees by Aaron Becker video:    • RRT, RRT* \& Random Trees   
- RRT* FND: Motion Planning in Dynamic Environments video:    • RRT* FND - motion planning in dynamic...    

--------------------------------------------------------------------------------------------------------
Get a free product trial: https://goo.gl/ZHFb5u
Learn more about MATLAB: https://goo.gl/8QV7ZZ
Learn more about Simulink: https://goo.gl/nqnbLe
See what's new in MATLAB and Simulink: https://goo.gl/pgGtod

© 2020 The MathWorks, Inc. MATLAB and Simulink are registered trademarks of The MathWorks, Inc. 
See www.mathworks.com/trademarks for a list of additional trademarks. Other product or brand names may be trademarks or registered trademarks of their respective holders.},
	urldate = {2023-09-07},
	author = {{MATLAB}},
	month = jul,
	year = {2020},
	keywords = {video},
}
